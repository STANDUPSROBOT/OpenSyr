{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/guilhem/Bureau/API-Projet-TER/react-flask-app/src/components/OpenSYR.js\";\nimport '../App.css';\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport axios from 'axios';\n\nclass OpenSYR extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      alert('A form was submitted: ' + this.state);\n      fetch('/api/init_python', {\n        method: 'POST',\n        // We convert the React state to JSON and send it as the POST body\n        body: JSON.stringify(this.state)\n      }).then(function (response) {\n        console.log(response);\n        return response.json();\n      });\n      event.preventDefault();\n    };\n\n    this.state = {\n      diameter: '',\n      length: '',\n      volume: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-form\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        action: \"/api/init_python\",\n        method: \"post\",\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              column: \"lg\",\n              lg: 0,\n              children: \"Syringe diameter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Syringe diameter (cm)\",\n              value: this.state.diameter,\n              onChange: this.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              column: \"lg\",\n              lg: 0,\n              children: \"Length of the experience\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Length of the experience (s)\",\n              value: this.state.length,\n              onChange: this.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              column: \"lg\",\n              lg: 0,\n              children: \"Volume to inject\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Volume to inject (mL)\",\n              value: this.state.volume,\n              onChange: this.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Launch experience\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 15\n    }, this);\n  }\n\n  init_python(e) {\n    //e.preventDefault();\n    let form = new FormData();\n    form.append('Diameter', data.Diameter);\n    form.append('Length', data.Length);\n    form.append('Volume', data.Volume);\n    let d = {\n      method: 'post',\n      url: \"/api/init_python\",\n      data: form,\n      config: {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }\n    };\n    let req = axios(d);\n    return new Promise(resolve => {\n      req.then(res => {\n        return resolve(res.data);\n      });\n    });\n  }\n\n}\n\nexport default OpenSYR;","map":{"version":3,"sources":["/home/guilhem/Bureau/API-Projet-TER/react-flask-app/src/components/OpenSYR.js"],"names":["React","Button","Form","axios","OpenSYR","Component","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","alert","state","fetch","method","body","JSON","stringify","then","response","console","log","json","preventDefault","diameter","length","volume","render","init_python","e","form","FormData","append","data","Diameter","Length","Volume","d","url","config","headers","req","Promise","resolve","res"],"mappings":"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","sourcesContent":["import '../App.css';\nimport React from 'react';\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\nimport axios from 'axios';\n\nclass OpenSYR extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = { diameter: '',length : '', volume : '' };\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value});\n  }\n\n  handleSubmit = (event) => {\n    alert('A form was submitted: ' + this.state);\n\n    fetch('/api/init_python', {\n        method: 'POST',\n        // We convert the React state to JSON and send it as the POST body\n        body: JSON.stringify(this.state)\n      }).then(function(response) {\n        console.log(response)\n        return response.json();\n      });\n\n    event.preventDefault();\n}\n\n    render(){\n      return  <div className=\"App-form\" >\n                <Form action=\"/api/init_python\" method=\"post\" onSubmit={this.handleSubmit}>\n                  <Form.Group>\n                        <Form.Row>\n                          <Form.Label column=\"lg\" lg={0}>\n                            Syringe diameter\n                          </Form.Label>\n                              <Form.Control type=\"text\" placeholder=\"Syringe diameter (cm)\" value={this.state.diameter}\n                              onChange={this.handleChange} />\n                        </Form.Row>\n                        <br />\n                        <Form.Row>\n                          <Form.Label column=\"lg\" lg={0}>\n                            Length of the experience\n                          </Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Length of the experience (s)\" value={this.state.length}\n                            onChange={this.handleChange}/>\n                        </Form.Row>\n                        <br />\n                        <Form.Row>\n                          <Form.Label column=\"lg\" lg={0}>\n                            Volume to inject\n                          </Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Volume to inject (mL)\" value={this.state.volume}\n                            onChange={this.handleChange}/>\n                        </Form.Row>\n                    </Form.Group>\n                  <Button variant=\"primary\" type=\"submit\">Launch experience</Button>                  \n                </Form>\n              </div>\n    }\n\n\n    init_python(e) {\n        //e.preventDefault();\n        let form = new FormData();\n        form.append('Diameter',data.Diameter);\n        form.append('Length',data.Length);\n        form.append('Volume',data.Volume);\n        let d = {\n          method: 'post',\n          url: \"/api/init_python\",\n          data: form,\n          config: {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            },\n          },\n        };\n        let req = axios(d);\n        return new Promise((resolve)=>{\n           req.then((res)=>{\n               return resolve(res.data);\n           });\n        });\n    }\n}   \nexport default OpenSYR;\n"]},"metadata":{},"sourceType":"module"}